{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww19040\viewh14640\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\b\fs28 \cf0 To Do\

\b0\fs24 - compressed JSON document\
- for mismatching type, look for 
\f1\fs22 \CocoaLigature0 <key>String
\f0\fs24 \CocoaLigature1  property, for example date -> 
\f1\fs22 \CocoaLigature0 dateString
\f0\fs24 \CocoaLigature1 , alternatively could look for a 
\f1\fs22 \CocoaLigature0 initWithString:
\f0\fs24 \CocoaLigature1  method, could support both mechanisms. Could also extend to support other JSON types other than just strings. Alternatively class method that returns a dictionary of blocks  for property names, the block takes the property, would prevent interface pollution.\
- unit tests for strict JSON.\
- better bad JSON handling.\
- work with 
\f2\b\fs22 \CocoaLigature0 NSURLConnection
\f0\b0\fs24 \CocoaLigature1 .\
- Garbage Collection support? (probable not since Apple have deprecated this)\
- Parse function call/block proc?\
- Handle keys with characters outside of ASCII.}